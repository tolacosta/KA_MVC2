package model.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.NamingException;

import model.dto.PreCourse;

public class PreCourseDAO {

	private Connection cnn = null;
	public PreCourseDAO() throws ClassNotFoundException, NamingException, SQLException {
		cnn = new DBUtility().getConnect();
	}
	
	public boolean addPreCourse(PreCourse preCourse) throws SQLException{
		final String SQL = "INSERT INTO precourse.pre_course VALUES(nextval('pre_course_id'),now(),?,?,?,?,?,?,?,?,?,?,?,?,?);";
		try {
			PreparedStatement pstmt = cnn.prepareStatement(SQL);
			pstmt.setInt(1, preCourse.getUserId());
			pstmt.setString(2, preCourse.getUsername());
			pstmt.setString(3, preCourse.getEmail());
			pstmt.setString(4, preCourse.getTelephone());
			pstmt.setString(5, preCourse.getUniversity());
			pstmt.setDate(6, (Date) preCourse.getDob());
			pstmt.setString(7, preCourse.getPob());
			pstmt.setString(8, preCourse.getUserImage());
			pstmt.setString(9, preCourse.getJavaCourse());
			pstmt.setString(10, preCourse.getWebCourse());
			pstmt.setInt(11, preCourse.getPayment());
			pstmt.setString(12, preCourse.getComment());
			pstmt.setString(13, preCourse.getGender());
			if(pstmt.executeUpdate() > 0)
				return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			cnn.close();
		}
		return false;
	}
	
	public boolean deletePreCourse(int id) throws SQLException{
		final String SQL = "DELETE FROM precourse.pre_course WHERE precourse.pre_course.pc_id = ?;";
		try {
			PreparedStatement pstmt = cnn.prepareStatement(SQL);
			pstmt.setInt(1, id);
			if(pstmt.executeUpdate() > 0)
				return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			cnn.close();
		}
		
		return false;
	}

	public boolean editPreCourse(PreCourse preCourse) throws SQLException{
		final String SQL = "UPDATE precourse.pre_course SET pc_dob = ?, pc_email = ?, "
				+ "pc_coursetype = ?, pc_payment = ?, pc_pob = ?, pc_shift = ?, pc_tel = ?, "
				+ "pc_university = ?, pc_userimage = ?, pc_username = ?, pc_comment = ?, "
				+ "pc_userid = ?, pc_gender = ? WHERE pc_id = ?;";
		try {
			PreparedStatement pstmt = cnn.prepareStatement(SQL);
			pstmt.setDate(1, (Date) preCourse.getDob());
			pstmt.setString(2, preCourse.getEmail());
			pstmt.setString(3, preCourse.getJavaCourse());
			pstmt.setInt(4, preCourse.getPayment());
			pstmt.setString(5, preCourse.getPob());
			pstmt.setString(6, preCourse.getWebCourse());
			pstmt.setString(7, preCourse.getTelephone());
			pstmt.setString(8, preCourse.getUniversity());
			pstmt.setString(9, preCourse.getUserImage());
			pstmt.setString(10, preCourse.getUsername());
			pstmt.setString(11, preCourse.getComment());
			pstmt.setInt(12, preCourse.getUserId());
			pstmt.setString(13, preCourse.getGender());
			pstmt.setInt(14, preCourse.getId());
			if(pstmt.executeUpdate() > 0)
				return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			cnn.close();
		}
		return false;
	}

	public ArrayList<PreCourse> getAllPreCourses() throws SQLException{
		ArrayList<PreCourse> preCourses = new ArrayList<PreCourse>();
		final String SQL = "SELECT *FROM precourse.pre_course;";
		try {
			PreparedStatement pstmt = cnn.prepareStatement(SQL);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next()){
				PreCourse preCourse = new PreCourse();
				preCourse.setId(rs.getInt(1));
				preCourse.setDateCreate(rs.getDate(2));
				preCourse.setUserId(rs.getInt(3));
				preCourse.setUsername(rs.getString(4));
				preCourse.setEmail(rs.getString(5));
				preCourse.setTelephone(rs.getString(6));
				preCourse.setUniversity(rs.getString(7));
				preCourse.setDob(rs.getDate(8));
				preCourse.setPob(rs.getString(9));
				preCourse.setUserImage(rs.getString(10));
				preCourse.setJavaCourse(rs.getString(11));
				preCourse.setWebCourse(rs.getString(12));
				preCourse.setPayment(rs.getInt(13));
				preCourse.setComment(rs.getString(14));
				preCourses.add(preCourse);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			cnn.close();
		}
		return preCourses; 
	}
	
	public PreCourse getPreCourse(int id) throws SQLException{
		PreCourse preCourse = new PreCourse();
		final String SQL = "SELECT * FROM precourse.pre_course WHERE pc_id = ?";
		try {
			PreparedStatement pstmt = cnn.prepareStatement(SQL);
			pstmt.setInt(1, id);
			ResultSet rs = pstmt.executeQuery();
			while(rs.next()){
				preCourse.setId(rs.getInt(1));
				preCourse.setDateCreate(rs.getDate(2));
				preCourse.setUserId(rs.getInt(3));
				preCourse.setUsername(rs.getString(4));
				preCourse.setEmail(rs.getString(5));
				preCourse.setTelephone(rs.getString(6));
				preCourse.setUniversity(rs.getString(7));
				preCourse.setDob(rs.getDate(8));
				preCourse.setPob(rs.getString(9));
				preCourse.setUserImage(rs.getString(10));
				preCourse.setJavaCourse(rs.getString(11));
				preCourse.setWebCourse(rs.getString(12));
				preCourse.setPayment(rs.getInt(13));
				preCourse.setComment(rs.getString(14));
				preCourse.setGender(rs.getString(15));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			cnn.close();
		}
		return preCourse;
	}
}
